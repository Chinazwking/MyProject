#version 330 core

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 onormal;
in vec3 frag_pos;
in vec2 texcoords;

out vec4 frag_color;

uniform mat3 normal_mat;
uniform vec3 light_color;
uniform Material material;
uniform Light light;
uniform sampler2D emission;

void main()
{
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, texcoords));
    vec3 normal = normalize(normal_mat * onormal);
    vec3 lightdir = normalize(light.position - frag_pos);
    vec3 viewdir = normalize(-frag_pos);
    vec3 refdir = reflect(-lightdir, normal);
    vec3 diffuse = light.diffuse * max(dot(normal, lightdir), 0) * vec3( texture(material.diffuse, texcoords));
    vec3 specular = light.specular * pow(max(dot(viewdir, refdir), 0), material.shininess) * vec3(texture(material.specular, texcoords));
    vec3 mix_color = ambient + diffuse + specular;
    frag_color = vec4(mix_color + vec3(texture(emission, texcoords)), 1.0);
}
