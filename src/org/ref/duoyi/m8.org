#+STARTUP: INDENT

* 活动图
:PROPERTIES:
:header-args:plantuml: :cache "yes"
:END:

#+CAPTION: 游戏启动环节
#+BEGIN_SRC plantuml
  @startuml
  title 游戏启动流程
  start
  partition init #red {
      :初始化""sys.path"";
      :初始化UI路径;
      :初始化导表路径;
      :初始化yibug;
      :重定向标准输出和错误;
  }
  partition main #orange {
      :""启动游戏逻辑"";
      repeat
      :""执行主循环"";
      repeat while (exit) is (no) not (yes)
      stop
  }
  @enduml
#+END_SRC

#+CAPTION: 进入战斗逻辑步骤
#+BEGIN_SRC plantuml
  @startuml
  title 进入战斗逻辑
  start
  :初始化全局变量;
  :初始化导演类;
  :初始化分辨率;
  :初始化场景;
  :加载资源;
  fork
      :初始化网络;
  fork again
      :初始化界面管理器;
      :初始化uuid;
      :初始化gm命令;
      :打开登录界面;
  end fork
  :跳转到关卡选择界面(""dlgafk"");
  :选择人物进行战斗(""dlgbattleplan"");
  end
  @enduml
#+END_SRC

* 类图
#+CAPTION: 模型层
#+BEGIN_SRC plantuml
  @startuml
  package model.battle <<Folder>> #ORANGE {
      class CBattlePlanModel {
          - dict RULE_DATA
          - dict LEVEL_DATA
          - dict MONSTER_DATA
          --
          - dict m_HeroOnField
          - dict m_HeroOnFieldFive
          - dict m_EnemyOnField
          - int m_Level
          - int m_Type
          - dict m_OnFieldData = {}
          - int m_OnFieldCount
          ==
          + int GetLevelData()
          ...
          + SetGameLevel(int type, int id)
          ...
          + RefreshOnFieldHeroData()
      }
      note right
          战斗信息建模:
          ===
          战场类型
          战场规则
          我方英雄
          敌方怪物
      end note

      class CMainAFKModel {
          - dict RULE_DATA
          - dict LEVEL_DATA
          - dict MONSTER_DATA
          --
          - dict m_OnFieldID
          - dict m_OnFieldData
          - dict m_MinLevel
          ==
          + str GetRuleName()
          ...
          + RefreshAFKHero()
      }
  }

  package model.hero <<Folder>> #RED {
      class CHeroMgr {
          - dict m_dHeroObj
          - list m_Container
          ==
          + CHeroDetail GetHeroDataById(int id)
          + GetHeroDataByFilter(int job, int camp, int type)
          + list GetHeros()
          + SetContainer(list container)
          + list GetContainer()
      }
      note bottom
          英雄属性建模:
          ===
          所有英雄对象的属性
      end note
      class CHeroDetail {
          - int m_ID
          - dict m_dHeroData
          - dict m_dCardSkill
          - int m_Level = 1
          - str m_Name
          ==
          + int GetID()
          ...
          + SetLevel(int level)
          ...
          + UpGrade()
          ...
          + DelCardSkill(int card_id)
      }
      class CCoefficient {
          - int m_ID
          - dict m_CoeData
          ==
          + int GetHeroType()
          ...
          + int GetMagic()
      }

      CHeroMgr o-[#yellow,bold]-"n" CHeroDetail
  }

  package model.skill <<Folder>> #GREEN {
      class CCardSkillMgr {
          - dict m_dCardObj
          ==
          + list GetAllCardData(int job)
          + CCardDetail GetCardInfoById(int id)
          + list GetCardListInfoByCost(int cost)
      }
      note bottom
          卡牌技能模型
          ===
          所有的通用卡牌技能属性
      end note

      class CCardDetail {
          - int m_ID
          - int m_UserType
          - bool m_bDisplay
          - dict m_dCardData
          ==
          + int GetId()
          ...
          + int GetCost()
          + SetCardUser(int)
          + SetIsDisplay(bool)
      }
      class CHeroSkillMgr {
          - dict m_dNormalSkillData
          - dict m_dPassiveSkillData
          - dict m_dUniqueSkillData
          ==
          + dict GetSkillDataByID(int id, int type)
          + str GetSkillNameByID(int id, int type)
          + str GetSkillIconByID(int id, int type)
      }

      CCardSkillMgr o-[#yellow,bold]-"n" CCardDetail
  }

  package data <<Folder>> #BLUE {
      class normal_skill {
          + dict DATA
      }
      note bottom: 英雄普通攻击数据
      class unique_active_skill {
          + dict DATA
      }
      note bottom: 英雄专属主动技能卡牌数据
      class unique_passive_skill {
          + dict DATA
      }
      note bottom: 英雄专属被动技能卡牌数据
      class card_active_skill {
          + dict DATA
      }
      note bottom: 通用主动技能卡牌数据
      class card_passive_skill {
          + dict DATA
      }
      note bottom: 通用被动技能卡牌数据
      class monster_attr {
          + dict DATA
      }
      note bottom: 英雄数据信息
      class attribute_coe {
          + dict DATA
      }
      note bottom: 英雄系数信息
      class levelx {
          + dict DATA
      }
      note bottom: 关卡信息
      class rulesx {
          + dict DATA
      }
      note bottom: 战场规则信息
      class monsterx {
          + dict DATA
      }
      note bottom: 怪物基本信息
  }

  /'Relationship'/

  CBattlePlanModel o-[#yellow]- levelx
  CBattlePlanModel o-[#yellow]- rulesx 
  CBattlePlanModel o-[#yellow]- monsterx
  CBattlePlanModel -[#yellow]-> CHeroMgr
  CBattlePlanModel -[#yellow]-> CHeroDetail

  CMainAFKModel o-[#yellow]- levelx
  CMainAFKModel o-[#yellow]- rulesx 
  CMainAFKModel o-[#yellow]- monsterx
  CMainAFKModel -[#yellow]-> CHeroMgr
  CMainAFKModel -[#yellow]-> CHeroDetail

  CHeroMgr .[#yellow].> monster_attr
  CCoefficient -[#yellow]-> attribute_coe
  CHeroDetail -[#yellow]-> monster_attr

  CHeroSkillMgr o-[#yellow]- unique_passive_skill
  CHeroSkillMgr o-[#yellow]- unique_active_skill
  CHeroSkillMgr o-[#yellow]- normal_skill

  CCardSkillMgr .[#yellow].> card_passive_skill
  CCardSkillMgr .[#yellow].> card_active_skill
  CCardDetail -[#yellow]-> card_passive_skill
  CCardDetail -[#yellow]-> card_active_skill
  CCardDetail -[#yellow]-> unique_passive_skill
  CCardDetail -[#yellow]-> unique_active_skill
  @enduml
#+END_SRC
