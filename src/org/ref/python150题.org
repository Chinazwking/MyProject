#+STARTUP: INDENT OVERVIEW

* python 150题 [75%]
** DONE 语言特性 [6/6]
  1. [X] 谈谈对Python和其他语言的区别. *第一题*
     1) 不用大括号来表示缩进
     2) 弱类型, 解释性语言
     3) 强大的标准库
     4) 扩展性强
  2. [X] 简述解释型和编译型编程语言.
     - 解释型 :: 每次运行都要解释成成机器码然后运行, 效率较低, 但是移植性强
     - 编译型 :: 先将代码编译成可执行文件, 以后运行时可以直接执行, 效率高, 移植性差
  3. [X] Python的解释器种类及相关特点?
     - CPython :: 使用最广泛python解释器
     - IPython :: 基于CPython的解释器, 增强了其交互性
     - JPython :: 运行在Java上的解释器
     - PyPy :: 对代码进行动态编译, 提高了执行速度
  4. [X] 说说你知道的Python3和Python2之间的区别?
     1) print不再是语句, 而是函数
     2) /不再是地板除, 而是真除法
     3) int 和 long 统一为int型
     4) 一系列返回列表的对象返回值改为迭代器对象, 比如range
     5) 新增了nonlocal关键字用来修改自由变量
  5. [X] Python3和Python2中int和long的区别?
     - Python2 :: int的范围和机器位数有关, long的范围和虚拟内存大小有关
     - Python3 :: long合并到int上
  6. [X] xrange和range的区别?
     - xrange返回一个惰性求值数据生成器对象, 即便范围很大也不会占用大量内存, 而
       range则会直接生成一个列表, 如果范围大会占用大量内存.

** DONE 编码规范 [12/12]
  1. [X] 什么是PEP8?
     - PEP(Python Enchantment Proposal) 8, 内容是python代码风格指南.
  2. [X] 了解python之禅吗?
     - ~import this~ 可以看到, 主要描述的是python编程的一般性准则.
  3. [X] 了解docstring么?
     - 出现在模块, 函数, 类里的第一行的字符串常量, 会被当做__doc__属性, 成为对象的
       帮助文档.
  4. [X] 了解类型注解吗?
     - 变量定义时在后面加上冒号和类型名, 这种写法叫做类型注解. 对阅读, 静态检查,
       第三方工具补全很有帮助.
  5. [X] 例举你知道Python对象的命名规范, 例如方法或者类等?
     - 类 :: 类名应该大写开头
     - 方法 :: 采用首字母大写的方式(骆驼式)命名, 遵循动宾原则
  6. [X] Python中的注释有几种?
     - 块注释 :: 每行一个#和空格开头的多行注释
     - 行内注释 :: 离代码最少有2个单位远的#注释
     - 多行注释 :: 三单双引号内部的多行注释
  7. [X] 如何优雅的给一个函数加注释?
     - 使用文档字符串和类型注解.
  8. [X] 如何给变量加注释?
     - 使用类型注解, 注释的时候要么在变量上方, 要么在同一行但是距离变量所在语句有2
       单位以上距离.
  9. [X] Python代码缩进中是否支持Tab键和空格混用?
     - 不支持, 混用可能会抛出异常. 因为不同平台默认tab缩进可能不一致, 代码移植时可
       能导致缩进不对齐.
  10. [X] 是否可以在一句import导入多个库?
      - 语法上可以, 实际上一般每一行只导入一个库.
  11. [X] 再给Py文件命名的时候需要注意什么?
      - 作为模块命名的时候要小写, 而且名字要描述出模块的作用.
  12. [X] 例举几个规范Python代码风格的工具数据类型字符串.
      - sName :: 字符串变量
      - m_Name :: 类成员字符变量

** DONE 字符串 [11/11]
  1. [X] 列举Python中的基本数据类型?
     - 数字(Numbers), 字符串(String), 列表(List), 元组(Tuple), 字典(Dict),
       集合(Set).
  2. [X] 如何区别可变数据类型和不可变数据类型?
     - 简单来说, 指向内存值不可变即为不可变数据类型, 否则为可变数据类型. 可以使用
       hash函数, 如果抛出异常的就是可变数据类型.
  3. [X] 将"hello world"转换为首字母大写"Hello World".
     - ~"hello world".title()~
  4. [X] 如何检测字符串中只含数字?
     - ~str.isdigit()~
  5. [X] 将字符串"ilovechina"进行反转.
     - ~"ilovechina"[::-1]~
  6. [X] Python格式字符串方式你知道哪些?
     1. %格式化, ~'%d=%d' % (1, 2)~
     2. format函数 ~'{}={}'.format(1, 2)~
     3. 字符串模板 ~Template('${a} = ${b}').substitute(a=1, b=2)~
  7. [X] 有一个字符串开头和末尾都有空格, 比如" adabdw ", 要求写一个函数把这个字符串的前后空格都去掉.
     #+BEGIN_SRC python
       def strip(s):
           for i in range(len(s)):
               if s[i] != ' ':
                   break
           for j in range(len(s)-1, -1, -1):
               if s[j] != ' ':
                   break
           return s[i:j+1]
     #+END_SRC
  8. [X] 获取字符串"123456"最后的两个字符.
     - ~"123456"[-2:]~
  9. [X] 一个编码为GBK的字符串S, 要将其转为UTF-8编码的字符串, 应如何操作?
     - ~S.decode('gbk').encode('utf-8')~
  10. [X]
      1) s="info: xiaoZhang 33 shandong", 用正则切分字符串输出['info',
         'xiaoZhang', '33', 'shandong'].
         - ~re.split(r': | ', s)~
      2) a="你好 中国 ", 去除多余空格只留一个空格.
         - ~a.rstrip()~
  11. [X]
      1) 如何将字符串转为小写?
         - ~str.tolower()~
      2) 单引号、双引号、三引号的区别?
         - 单引号和双引号没有区别, 不过当双引号字符串里有单引号时不需要转义, 单引
           号字符串同理.三引号可以包括各种特殊字符, 比如换行, 引号, 制表等等, 一般
           用来表示多行文本.
         
** DONE 列表 [6/6]
  1. [X] 已知AList = [1, 2, 3, 1, 2], 对AList列表元素去重, 写出具体过程.
     - ~set(AList)~
  2. [X] 如何实现"1,2,3"变成["1","2","3"] *第三十一题*
     - ~"1,2,3".split(',')~
  3. [X] 给定两个list, A和B, 找出相同元素和不同元素.
     - ~set(A)|set(B); set(A)^set(B)~
  4. [X] [[1,2],[3,4],[5,6]]一行代码展开该列表, 得出[1,2,3,4,5,6].
     - ~reduce(lambda x, y: x + y, a)~
  5. [X] 合并列表[1,5,7,9]和[2,2,6,8].
     - ~[1,5,7,9].extend([2,2,6,8])~
  6. [X] 如何打乱一个列表的元素.
     #+BEGIN_SRC python
       import random
       arr = [...]
       for i in range(len(arr)-1, 0, -1):
         rpos = random.randint(0, i)
         arr[rpos], arr[i] = arr[i], arr[rpos]
     #+END_SRC

** DONE 字典 [13/13]
  1. [X] 字典操作中的del和pop有什么区别?
     - pop会返回移除的元素, 而且可以指定key未命中的默认返回值, 而del如果key未命中则直接抛出异常.
  2. [X] 按照字典内的年龄排序 d1 = [{'name': 'alice', 'age':38}, ...}
     - ~sorted(d1, key=lambda x: x['age'])~
  3. [X] 请合并下面两个字典a = {"A": 1, "B":2}, b={"C":3, "D":4}
     - ~a.update(b)~
  4. [X] 如何使用生成式的方式生成一个字典, 写一段功能代码.
     - ~{i:i+1 for i in xrange(10)}~
  5. [X] 如何把元组("a", "b")和元组(1,2), 变为字典{"a":1, "b":2}
     - ~dict(zip(("a", "b"), (1, 2)))~
  6. [X] Python常用数据结构的类型及特点
     - dict :: 映射访问式容器, 可变
     - list :: 顺序访问式容器, 可变
     - tuple :: 顺序访问式容器, 不可变
     - str :: 顺序访问式标量, 不可变
     - int :: 直接访问式标量, 不可变
  7. [X] 如何交换字典D={"A": 1, "B": 2}的键和值
     - ~{D[k]:k for k in D}~
  8. [X] Python里面如何实现tuple和list的转换
     - 直接通过类工厂函数 ~tuple()~ 和 ~list()~ 即可互相转换
  9. [X] 我们知道对于列表可以使用切片操作进行部分元素的选择, 那么如何对生成器类型的对象
     实现相同的功能呢?
     - ~itertools.islice()~ 可以对生成对象进行切分
  10. [X] 请将[i for i in range(3)]改成生成器
      - ~(i for i in xrange(3))~
  11. [X] a="hello"和b="你好"编码成bytes类型
      - ~bytes(a, encoding='utf-8'); bytes(b, encoding='cp936')~
  12. [X] 下面的代码输出结果是什么?
      #+BEGIN_SRC python
      a = (1, 2, 3, [4, 5, 6, 7], 8)
      a[2] = 2
      #+END_SRC
      - TypeError异常
  13. [X] 下面的代码输出结果是什么?
      #+BEGIN_SRC python
      a = (1, 2, 3, [4, 5, 6 ,7], 8)
      a[3][0] = 2
      #+END_SRC
      - ~(1, 2, 3, [2, 5, 6, 7], 8)~
      
** DONE 操作类题目 [21/21]
   1. [X] Python交换两个变量的值
      - ~a, b = b, a~
   2. [X] 在读文件操作的时候会使用read, readline或者readlines, 简述他们各自的作用
      - read :: 读取指定大小的字节
      - readline :: 读取一行数据
      - readlines :: 读取多行数据, 每行的数据作为列表中的一项返回
   3. [X] json序列化时, 可以处理的数据类型有哪些? 如何定制支持datetime类型.
      - 支持python的基本数据类型(dict, list, int, tuple, str, unicode, bool, None)
        可以用子类继承json模块, 重写encoder和decoder从而支持datetime类型.
   4. [X] json序列化时, 默认遇到中文会转成unicode, 如果想保留中文怎么办?
      - ~dumps(obj, ensure_ascii=False)~ , 将ensure_ascii改为False.
   5. [X] 有两个磁盘文件A和B, 各存放一行字, 要求把这两个文件中的信息合并(按字母顺序)
      输出到一个新文件C中.
      #+BEGIN_SRC python
        def merge(A, B, C):
            A.seek(0)
            B.seek(0)
            C.seek(0)
            a = A.read(1)
            b = B.read(1)
            while a == '' or b == '':
              if a <= b:
                  C.write(a)
                  a = A.read(1)
              else:
                  C.write(b)
                  b = B.read(1)
            if a == '':
                while b != '':
                  C.write(b)
                  b = B.read(1)
            else:
                while a != '':
                  C.write(a)
                  a = A.read(1)
      #+END_SRC
   6. [X] 如果当前日期为20190530, 要求写一个函数输出N天后的日期, (比如N为2, 则输
      出1)
      #+BEGIN_SRC python
        import datetime
        def n_days_after_date(N):
            now = datetime.datetime(2019, 05, 30)
            after = now + datetime.timedelta(N)
            result = ['{:0>2}'.format(i)
                          for i in (after.year, after.month, after.day)]
            return ''.join(result)
      #+END_SRC
   7. [X] 写一个函数, 接受整数参数n,返回一个函数, 函数的功能是把函数的参数和n相
      乘并把结果返回.
      #+BEGIN_SRC python
        def n_multiple(n):
          return lambda x: x*n
      #+END_SRC
   8. [X] 下面的代码会存在什么问题, 如何改进?
      #+BEGIN_SRC python
        def strappend(num):
            str='first'
            for i in range(num):
                str += str(i)
            return str
      #+END_SRC
      - 覆盖了str类, 会出现错误. 将除了str(i)以外的str统一替换成其他字符即可.
   9. [X] 一行代码输出1-100之间所有的偶数.
      - ~print([i for i in range(1, 101) if i&1 == 0])~
   10. [X] with语句的作用, 写一段代码.
       - 在进入和退出语句块时, 自动执行自定义的语句块, 无论是否是正常退出.
       #+BEGIN_SRC python
         with open('./example.txt', 'r') as f:
             for line in f:
                 print(f)
       #+END_SRC
   11. [X] python字典和json字符串相互转化的方法.
       #+BEGIN_SRC python
         dic = {'a': 1, 'b': 2}
         s = json.dumps(dic)
         obj = json.loads(s)
       #+END_SRC
   12. [X] 请写一个Python逻辑, 计算一个文件中的大写字母数量.
       #+BEGIN_SRC python
         count = 0
         for line in afile:
           count = sum(1 for c in line if c.isupper())
       #+END_SRC
   13. [X] +请写一个段Python连接Mongo数据库, 然后查询的代码.+ *第六十一题*
   14. [X] +说一下Redis的基本类型.+
   15. [X] +请写一段Python连接Redis数据库的代码.+
   16. [X] +请写一段Python连接MySQL数据库的代码.+
   17. [X] +了解Redis的事务吗?+
   18. [X] +了解数据库的三范式吗?+
   19. [X] +了解分布式锁吗?+
   20. [X] +用python实现一个Redis的分布式锁功能.+
   21. [X] +写一段Python使用Mongo数据库创建索引的代码.+

** DONE 高级特性 [18/18]
   1. [X] 函数装饰器有什么作用, 请举例说明.
      - 可以动态的给函数增加一些新的功能而不需要修改被包装的函数. 比如python标准库
        里的lru_cache装饰器就可以帮被装饰的函数增加缓存功能.
   2. [X] Python垃圾回收机制?
      - 采用引用计数+垃圾收集的机制, 当对象引用计数为0时, 垃圾收集会将其内存释放.
        使用标记-清除机制解决循环引用.
   3. [X] 魔法函数__call__怎么使用?
      - 当类实现此方法之后, 类的实例可以像函数那样调用.
   4. [X] 如何判断一个对象是函数还是方法?
      - 如果一个函数绑定到了类上面, 那他就是方法.
   5. [X] @classmethod和@staticmethod用法和区别.
      - @classmethod :: 第一个参数必须为类对象, 用在一些需要对类本身进行操作的方法上
      - @staticmethod :: 对参数没有任何要求, 相当于把一个函数放置于类的名称空间
   6. [X] Python中的接口如何实现?
      - 接口里面加上一条语句 ~raise NotImplementedError~; 或者使用元类
        ~ABCMeta~ 和 ~@abstractmethod~ 装饰器
   7. [X] Python中的反射了解么?
      - 给予对象在运行时取得自身信息的功能.
   8. [X] metaclass作用? 以及应用场景?
      - 元类就是用来创建类的类, 用来影响创建类时的操作. 可以用来实现抽象方法.
   9. [X] hasattr() getattr() setattr()的用法.
      - hasattr() :: 判断某一个对象是否有某个属性
      - getattr() :: 获得一个对象的某个属性, 如果没有则抛出异常
      - setattr() :: 设置一个对象的某个属性, 可能会覆盖
   10. [X] 请列举你知道的Python的魔法方法及用途.
       - ~__init__~ :: 用于初始化构造好的实例
       - ~__len__~ :: 用于内建 ~len()~, 返回对象长度
       - ~__eq__~ :: 用于比较操作符(==, !=), 判断对象是否相等
   11. [X] 如何知道一个Python对象的类型?
       - ~type()~
   12. [X] Python的传参是传值还是传址?
       - python一切皆对象, 所有变量均为对象的引用, 所以是传址.
   13. [X] Python中的元类(metaclass)使用举例.
       #+BEGIN_SRC python
         class MustHaveStrMetaClass(type):
             """任何以此类的元类必须实现__str__方法
             """
             def __init__(cls, name, bases, attrd):
                 super(cls.__class__, cls).__init__(name, bases, attrd)
                 if '__str__' not in attrd:
                     raise TypeError('Not Implemented __str__')
       #+END_SRC
   14. [X] 简述any()和all()方法.
       - any :: 如果序列里的任一元素为真则返回真, 空集为假
       - all :: 如果序列里的所有元素为真则返回真, 空集为真
   15. [X] filter方法求出列表所有奇数并构造新列表, a = [1, ..., 10].
       - ~filter(lambda x: x&1, a)~
   16. [X] 什么是猴子补丁?
       - 运行时动态的替换python的一个类或者模块.
   17. [X] Python之中是如何管理内存的?
       - 通过引用计数和垃圾收集来管理内存.
   18. [X] 当退出Python时是否释放所有内存分配?
       - 如果是进程结束, 所有的资源会由操作系统完成回收. 如果只是退出python而进程
         不结束, 可能有全局对象和c扩展对象残留.

** DONE 正则表达式 [3/3]
   1. [X] 使用正则表达式匹配出 ~<html>http://www.google.com</html>~ 中的url地址.
      - ~r'<html>(?P<url>.*?)</html>~
   2. [X] 正则表达式匹配中(.)和(.?)匹配的区别
      - ~(.)~ 是匹配至少一个任意字符, 而 ~(.?)~ 还可以匹配空.
   3. [X] 写一段匹配邮箱的正则表达式.
      - ~r'^[0-9a-zA-Z_]+@\w{2,}\.\w+$'~

** DONE 其他内容 [31/31]
   1. [X] 解释一下python中pass语句的作用. *第九十一题*
      - 代表什么事都不做, 类似于汇编语言里的NOP, 一般用于在需要语句的位置占位.
   2. [X] 简述你对input()函数的理解.
      - 相当于 ~eval(raw_input(prompt))~, 从标准输入得到表达式并求值. 比如如果输入
        5+3, 则会得到结果8, 如果输入字符串则必须加上引号, 否则求值会抛出错误.
   3. [X] python中的is和==.
      - is :: 比较的是两个元素的内存地址
      - == :: 比较的是两个元素的值
   4. [X] python中的作用域.
      - 内建作用域 :: 包含python定义的初始方法, 变量的作用域
      - 全局作用域 :: 包含python最上层定义的对象的作用域
      - 闭包作用域 :: 包含内部函数的非全局引用外部变量的作用域
      - 局部作用域 :: 包含函数内部定义变量的作用域
      名称搜索时搜自底向上, 找到即停止.
   5. [X] 三元运算符写法和场景应用.
      - ~x if True else y~, 可以求出两个元素中的较大值.
   6. [X] 了解enumerate么?
      - 返回一个枚举对象, 对象中的每个元素时由一个枚举值和迭代器中的一个元素构成的
        元组.
   7. [X] 列举5个python中的标准模块.
      - collections
      - itertools
      - functools
      - sys
      - random
   8. [X] 如何在函数中设置一个全局变量.
      - 在函数中使用 ~global x~.
   9. [X] pathlib的用法举例.
      - 列出子目录 :: ~[x for x in p.iterdir() if x.is_dir()]~
      - 列出所有py文件 :: ~list(p.glob('**/*.py'))~
   10. [X] python中的异常处理, 写一个简单地应用场景.
       #+BEGIN_SRC python
         try:
             v = raw_input('float number:')
             v = float(v)
         except (TypeError, ValueError) as e:
             print(e)
         else:
             pass
         finally:
             pass
       #+END_SRC
   11. [X] python中递归的最大次数, 如何突破?
       - 最大次数和具体的平台有关, 可以通过 ~sys.setrecursionlimit()~ 来设置最大层
         数.
   12. [X] 什么是面向对象的mro
       - 方法解释顺序, 当有多重继承的时候按照何种顺序在父类中寻找没有在子类中定义
         的属性.
   13. [X] isinstance的作用以及应用场景.
       - 判断一个实例是否是一个类的实例, 可以用来判断类的继承关系.
   14. [X] 什么是断言? 应用场景?
       - ~assert expr~, 当表达式结果为False则抛出断言异常. 可以用在测试某些输入值
         是否合法.
   15. [X] lambda表达式格式以及应用场景.
       - ~lambda [arg1[, arg2, ... argN]]: expr~ 经常用作高阶函数的参数, 或者排序
         函数的key参数.
   16. [X] 新式类和旧式类的区别.
       - 旧式类 :: 类是类对象, 实例是实例对象, 之间没有任何关系
       - 新式类 :: 类和实例都是类型对象, 从obj继承了很多额外属性
   17. [X] dir()是干什么用的?
       - 返回指定名字空间内的所有名字.
   18. [X] 一个包里有三个模块, demo1.py, demo2.py, demo3.py, 但使用from tools
       import * 导入模块时, 如何保证只有demo1, demo3被导入了.
       #+BEGIN_SRC python
         __all__ = ['demo1', 'demo3']
       #+END_SRC
   19. [X] 列举5个python之中的异常类型及其含义.
       - NameError :: 访问了一个在命名空间内未初始化的变量
       - SyntaxError :: 解释器语法错误
       - IndexError :: 请求的索引超出范围
       - IOError :: 输入/输出错误
       - AttributeError :: 访问未知对象属性
   20. [X] copy和deepcopy的区别是什么?
       - copy :: 仅拷贝最外层容器
       - deepcopy :: 每一层容器都依次拷贝
   21. [X] 代码中经常遇到的*args, **kwargs的含义及用法.
       - *args :: 代表非关键字变长参数, 用于给对象传递任意数量的非关键字参数
       - **kwargs :: 代表关键字变长参数, 用于给对象传递任意数量的关键字参数
       一般用在函数的声明中, 代表函数接受任意数量的参数.
   22. [X] Python中会由函数或成员变量包含单下划线前缀和结尾, 和双下划线前缀结尾
       区别是什么?
       - 单下划线 :: 代表这个对象是私有的, 不过这是约定并不是定义
       - 双下划线 :: 前缀代表这个属性是类的私有方法, 会进行改名
       - 前后双下划线 :: 类的特殊方法, 一般不要进行覆盖
   23. [X] w, a+, wb 文件写入模式的区别.
       - w :: 写入文件, 必要时清空文件内容
       - a+ :: 读写文件, 从文件的末尾开始写入
       - wb :: 以二进制写模式打开文件, 其余和w一致
   24. [X] 举例sort和sorted的区别.
       - sort :: 方法, 原地排序, 无返回值
       - sorted :: 函数, 原数组不变, 返回一个新的排序序列
   25. [X] 什么是负索引.
       - 从-1开始代表序列的最后一个元素, -(序列长度)代表序列第一个元素, 提供一种倒
         访问的手段.
   26. [X] pprint模块是干什么的?
       - 输出更加美观的列表, 元组, 字典数据结构字符串, 可以处理无限递归的情况.
   27. [X] 解释一下Python中的赋值运算符.
       - 一般赋值 :: ~a = 1~ 代表将a设置为1这个对象的一个引用
       - 增量赋值 :: ~a += 1~ 相当于 ~a = a + 1~
   28. [X] 解释一下Python中的逻辑运算符.
       - not :: 非运算符, True变False, False变True
       - and :: 与运算符, 两者均为真则为真
       - or :: 或运算符, 任一为真则为真
   29. [X] 讲讲Python中的位运算符.
       - & :: 与运算
       - | :: 或运算
       - ~ :: 取反运算
       - ^ :: 亦或运算
       - >> :: 右移运算
       - << :: 左移运算
   30. [X] 在Python之中如何使用多进制数字.
       - 使用内建的 ~oct() bin() hex() int()~ 可以轻松的在多进制数字和字符串之间转
         换.
   31. [X] 怎么声明多个变量并赋值. *第一百二十一题*
       - ~a = b = c = 1~

** TODO 算法和数据结构 [0/16]
   1. [ ]
   2. [ ]
   3. [ ]
   4. [ ]
   5. [ ]
   6. [ ]
   7. [ ]
   8. [ ]
   9. [ ]
   10. [ ]
   11. [ ]
   12. [ ]
   13. [ ]
   14. [ ]
   15. [ ]
   16. [ ]

** TODO 网络编程 [0/3]
   1. [ ]
   2. [ ]
   3. [ ]

** TODO 并发 [0/10]
   1. [ ]
   2. [ ]
   3. [ ]
   4. [ ]
   5. [ ]
   6. [ ]
   7. [ ]
   8. [ ]
   9. [ ]
   10. [ ]

       
   
